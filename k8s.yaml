---
# Source: argocd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: argocd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argocd-stable
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
---
# Source: argocd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argocd-canary
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
---
# Source: argocd/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      labels:
        helm.sh/chart: argocd-0.1.0
        app.kubernetes.io/name: argocd
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: argocd
      securityContext:
        {}
      containers:
        - name: argocd
          securityContext:
            {}
          image: "macabrabits/argocd-test:32"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: argocd/templates/gateway.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: argocd
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway # use istio default controller
    # app: argocd # use istio default controller
    # app.kubernetes.io/instance: argocd
  servers:
  - port:
      number: 8080
      name: http
      protocol: HTTP
    hosts:
    - "argocdtest.com"
---
# Source: argocd/templates/rollout.yaml
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: argocd
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 5
  strategy:
    canary:
      canaryService: argocd-canary
      stableService: argocd-stable
      trafficRouting:
        istio:
          virtualServices:
          - name: argocd # At least one virtualService is required
      steps:      
      - setWeight: 20
      - pause: {}
      - setWeight: 50
      - pause: {}
      - setWeight: 100
      - pause: {}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd
        app.kubernetes.io/instance: argocd
    spec:
      containers:
      - name: argocd
        image: "macabrabits/argocd-test:32"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http          
        resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: argocd/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: argocd
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  hosts:
  - "argocdtest.com"
  gateways:
  - argocd
  http:
  - route:
    - destination:
        host: argocd-stable
        port:
          number: 3000
      weight: 100
    - destination:
        host: argocd-canary
        port:
          number: 3000
      weight: 0
---
# Source: argocd/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "argocd-test-connection"
  labels:
    helm.sh/chart: argocd-0.1.0
    app.kubernetes.io/name: argocd
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['argocd:3000']
  restartPolicy: Never
